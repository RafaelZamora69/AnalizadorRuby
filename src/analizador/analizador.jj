PARSER_BEGIN(analizador)
import java.util.ArrayList;
public class analizador {
    public static void main(String[] args)throws ParseException, Exception, TokenMgrError{
        try{
            analizador analyzer = new analizador(System.in);
            analyzer.Start();
            System.out.println("Lexico y sintactico sin errores");
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }
}
PARSER_END(analizador)
//Ignorar
SKIP :
{
    " "|
    "\t"
}
//Palabras reservadas
TOKEN : {<END: "end">}
TOKEN : {<PUTS: "puts">}
TOKEN : {<IN: "in">}
TOKEN : {<LineBreak: ("\r\n"|"\n")+>}
//Condicionales
TOKEN: {<IF: "if">}
TOKEN: {<ELSE: "else">}
//ciclos
TOKEN: {<FOR: "for">}
//Simbolos
TOKEN: {<PLUS: "+">}
TOKEN: {<MINUS: "-">}
TOKEN: {<POR: "*">}
TOKEN: {<DIVIDE: "/">}
TOKEN: {<LPAREN: "(">}
TOKEN: {<RPAREN: ")">}
TOKEN: {<LBRACKET: "[">}
TOKEN: {<RBRACKET: "]">}
TOKEN: {<LBRACE: "{">}
TOKEN: {<RBRACE: "}">}
TOKEN: {<ASIGNATION: "=">}
TOKEN: {<NIL: "nil">}
TOKEN: {<QUOTE: "\"">}
TOKEN: {<COMMA: ",">}
TOKEN: {<CAT: "#">}
//Operadores lógicos
TOKEN: {<LESS: "<">}
TOKEN: {<LESSEQ: "<=">}
TOKEN: {<BIG: ">">}
TOKEN: {<BIGEQ: ">=">}
TOKEN: {<EQUALS: "==">}
TOKEN: {<TRUE: "true">}
TOKEN: {<FALSE: "false">}
//Cadenas
TOKEN : {<NUMBER: ((["0"-"9"])+)>}
TOKEN : {<TEXT : (["a"-"z","A"-"Z","0"-"9"])+>}
void Start():
{}
{
    Code()
}
void Code():
{}
{

    (
        LOOKAHEAD(2)Puts()|
        LOOKAHEAD(2)Variables()|
        If()|
        For()|
		Operaciones()
    )+
}
Token asignarString():
{Token t2;StringBuilder builder = new StringBuilder();}
{
    <QUOTE>(t2 = <TEXT>{builder.append(t2.image);builder.append(" ");}|t2 = <NUMBER>{builder.append(t2.image);})+<QUOTE>
    {t2.image = builder.toString().trim();return t2;}
}
ArrayList asignarArreglo():
{Token t1; ArrayList<Token> arreglo = new ArrayList<>();}
{
    <LBRACKET>[(
     t1 = <TEXT>{if(tokenAsignaciones.comprobarVariable(t1.image)){ arreglo.add(t1); } else { System.out.println("Error: '" + t1.image + "' no existe.");}}|
     t1 = <NIL>{arreglo.add(t1);}|
     t1 = asignarString(){StringBuilder builder = new StringBuilder();builder.append("\"");builder.append(t1.image);builder.append("\"");t1.image = builder.toString(); arreglo.add(t1);}|
     t1 = <NUMBER>{arreglo.add(t1);}|
     t1 = <TRUE>{arreglo.add(t1);}|
     t1 = <FALSE>{arreglo.add(t1);})[(
     <COMMA>(
     t1 = <TEXT>{if(tokenAsignaciones.comprobarVariable(t1.image)){ arreglo.add(t1); } else { System.out.println("Error: '" + t1.image + "' no existe.");}}|
     t1 = <NIL>{arreglo.add(t1);}|
     t1 = asignarString(){StringBuilder builder = new StringBuilder();builder.append("\"");builder.append(t1.image);builder.append("\"");t1.image = builder.toString(); arreglo.add(t1);}|
     t1 = <NUMBER>{arreglo.add(t1);}|
     t1 = <TRUE>{arreglo.add(t1);}|
     t1 = <FALSE>{arreglo.add(t1);}))+]]<RBRACKET>
     {return arreglo;}
}
String Interpolacion():
{StringBuilder builder = new StringBuilder(); Token t1;}
{
    //Operaciones()
    <CAT><LBRACE>(
    t1 = <TEXT>{if(tokenAsignaciones.comprobarVariable(t1.image)){ builder.append(tokenAsignaciones.obtenerValor(t1.image)); } else { System.out.println("Error: '" + t1.image + "' no existe.");}}|
    t1 = <NUMBER>{builder.append(t1.image);}|
    LOOKAHEAD(2)Operaciones())<RBRACE>
    {return builder.toString();}
}
String String():
{StringBuilder builder = new StringBuilder();String aux;Token t;}
{
    <QUOTE>[(
    aux = Interpolacion(){builder.append(aux);builder.append(" ");}|
    t = <TEXT>{builder.append(t.image);builder.append(" ");}|
    t = <NUMBER>{builder.append(t.image);builder.append(" ");})+]<QUOTE>
    {return builder.toString().trim();}
}
void ArrayIndex(String var):
{Token t1,index;}
{
    <NUMBER>
}
void If():
{}
{
  <IF>Comparacion()[<LineBreak>]
    [Code()]
    [<ELSE>[<LineBreak>]
    [Code()]]
    <END>[<LineBreak>]
}
void Comparacion():
{Token t1,condition;Object obj1;}
{
  (
    t1 = <NUMBER>{obj1 = Integer.parseInt(t1.image);}|
    t1 = <TEXT>{obj1 = t1.image;}|t1 = <TRUE>{obj1 = Boolean.parseBoolean(t1.image);}|t1 = <FALSE>{obj1 = Boolean.parseBoolean(t1.image);}|
    t1 = asignarString(){obj1 = t1.image;})
  (condition = <BIG>|
  condition = <BIGEQ>|
  condition = <LESS>|
  condition = <LESSEQ>|
  condition = <EQUALS>)
  (t1 = <NUMBER>{comparacion.CompararEnteros(obj1, t1.image, condition.image);}|
  t1 = <TEXT>{comparacion.CompararAsignacion(obj1, t1.image, condition.image);}|
  t1 = <TRUE>{comparacion.CompararBoolean(obj1, t1.image, condition.image);}|
  t1 = <FALSE>{comparacion.CompararBoolean(obj1, t1.image, condition.image);}|
  t1 = asignarString(){comparacion.CompararCadenas(obj1, t1.image, condition.image);})[<LineBreak>]
}
void Variables():
{Token t1,t2;ArrayList aux;}
{
    /***
    * variable = 0 | variable = "" | variable = nil | variable = false | variable = variable2
    *TODO Falta agregar variable[indice]
    */
    t1 = <TEXT>[<LBRACKET>(<NUMBER>|<TEXT>)<RBRACKET>]<ASIGNATION>(
    t2 = <NUMBER>{tokenAsignaciones.Asignar(t1,Integer.parseInt(t2.image));}|
    t2 = asignarString(){tokenAsignaciones.Asignar(t1,t2.image);}|
    t2 = <TEXT>{tokenAsignaciones.AsignarVariable(t1,t2.image);}|
    t2 = <NIL>{tokenAsignaciones.Asignar(t1,"nil");}|
    t2 = <TRUE>{tokenAsignaciones.Asignar(t1,Boolean.parseBoolean(t2.image));}|
    t2 = <FALSE>{tokenAsignaciones.Asignar(t1,Boolean.parseBoolean(t2.image));}|
    aux = asignarArreglo(){tokenAsignaciones.AsignarArreglo(t1.image,aux);})[<LineBreak>]
}
void Puts():
{Token t1,index;String aux;}
{
    /***
    * puts variable | puts "Hola mundo" | puts "me llamo #{nombre} y tengo #{edad} añazos | puts arreglo[indice]"
    */
    <PUTS>
    aux = String(){puts.imprimir(aux);}|
    t1 = <TEXT>[<LBRACKET>(index = <TEXT>{arreglo.valorArreglo(t1.image,index.image);}|index = <NUMBER>{arreglo.valorArreglo(t1.image,Integer.parseInt(index.image));})<RBRACKET>{return;}]{puts.imprimirVariable(t1);}|
    t1 = <NUMBER>{puts.imprimir(t1.image);}[<LineBreak>]
}
void For():
{Token iterator, aux; StringBuilder Cadena; ArrayList arreglo;}
{
    /***
    * for i in 10|[var,"hola",3,false]|"texto" | for i in array|string variable

    <FOR>iterator = <TEXT>{cicloFor.declararIterable(iterator.image);}<IN>
    */
    <FOR>iterator = <TEXT>{cicloFor.declararIterador(iterator.image);}<IN>
    (aux = <NUMBER>{cicloFor.forNumero(iterator.image,Integer.parseInt(aux.image));}|
    aux = <TEXT>{cicloFor.forVariable(iterator.image,aux.image);}|
    Cadena = cadenaFor(){cicloFor.forString(iterator.image,Cadena);}|
    arreglo = arregloFor(){cicloFor.forArray(iterator.image,arreglo);})[<LineBreak>]
    [Code()]
    <END>{cicloFor.eliminarIterador(iterator.image);}[<LineBreak>]
}
void Operaciones():
{Token t1,op,t2;System.out.println("operaciones");}
{
    (t1 = <NUMBER>|t1 = <TEXT>)op = OperadoresArit()(t2 = <NUMBER>{System.out.println(operaciones.opNumero(Float.parseFloat(t1.image),op.image,Float.parseFloat(t2.image)));}|<TEXT>)[<LineBreak>]
}
Token OperadoresArit():
{Token op;}
{
 (op = <PLUS>|op = <MINUS>|op = <POR>|op = <DIVIDE>){return op;}
}

StringBuilder cadenaFor():
{StringBuilder builder = new StringBuilder();String aux;Token t;}
{
    <QUOTE>[(
    t = <TEXT>{builder.append(t.image);builder.append(" ");}|
    t = <NUMBER>{builder.append(t.image);builder.append(" ");})+]<QUOTE>
    {return builder;}
}
ArrayList arregloFor():
{ArrayList<Object> arreglo = new ArrayList<>(); Token t1;String aux;}
{
    <LBRACKET>
    (
        aux = String(){arreglo.add(aux);}|
        t1 = <NUMBER>{arreglo.add(Integer.parseInt(t1.image));}|
        t1 = <TEXT>{
            Object value = tokenAsignaciones.obtenerValor(t1.image);
            arreglo.add(value);
        }|
        t1 = <TRUE>{arreglo.add(t1.image);}|
        t1 = <FALSE>{arreglo.add(t1.image);})
        [(<COMMA>(aux = String(){arreglo.add(aux);}|
                         t1 = <NUMBER>{arreglo.add(Integer.parseInt(t1.image));}|
                         t1 = <TEXT>{
                             Object value = tokenAsignaciones.obtenerValor(t1.image);
                             arreglo.add(value);
                         }|
                         t1 = <TRUE>{arreglo.add(t1.image);}|
                         t1 = <FALSE>{arreglo.add(t1.image);}))+]<RBRACKET>
        {return arreglo;}
}