PARSER_BEGIN(analizador)
public class analizador {
    public static void main(String[] args)throws ParseException, Exception, TokenMgrError{
        try{
            analizador analyzer = new analizador(System.in);
            analyzer.Start();
            System.out.println("Lexico y sintactico sin errores");
        }catch(Exception e){
            System.out.println(e.getMessage());
        }
    }
}
PARSER_END(analizador)
//Ignorar
SKIP :
{
    " "|
    "\t"
}
//Palabras reservadas
TOKEN : {<END: "end">}
TOKEN : {<DO: "do">}
TOKEN : {<PUTS: "puts">}
TOKEN : {<NIL: "nil">}
TOKEN : {<IN: "in">}
TOKEN : {<LineBreak: ("\r\n"|"\n")>}
//Condicionales
TOKEN: {<IF: "if">}
TOKEN: {<ELSE: "else">}
//ciclos
TOKEN: {<FOR: "for">}
//Simbolos
TOKEN: {<PLUS: "+">}
TOKEN: {<MINUS: "-">}
TOKEN: {<POR: "*">}
TOKEN: {<DIVIDE: "/">}
TOKEN: {<INCREMENT: "++">}
TOKEN: {<DECREMENT: "--">}
TOKEN: {<LPAREN: "(">}
TOKEN: {<RPAREN: ")">}
TOKEN: {<LBRACKET: "[">}
TOKEN: {<RBRACKET: "]">}
TOKEN: {<LBRACE: "{">}
TOKEN: {<RBRACE: "}">}
TOKEN: {<ASIGNATION: "=">}
TOKEN: {<QUOTE: "\"">}
TOKEN: {<COMMA: ",">}
TOKEN: {<COLON: ":">}
TOKEN: {<CAT: "#">}
//Operadores lógicos
TOKEN: {<LESS: "<">}
TOKEN: {<LESSEQ: "<=">}
TOKEN: {<BIG: ">">}
TOKEN: {<BIGEQ: ">=">}
TOKEN: {<EQUALS: "==">}
TOKEN: {<AND: "and">}
TOKEN: {<OR: "or">}
TOKEN: {<NOT: "not">}
TOKEN: {<TRUE: "true">}
TOKEN: {<FALSE: "false">}
//Cadenas
TOKEN : {<NUMBER: ((["0"-"9"])+|(["0"-"9"])+"."(["0"-"9"])+)>}
TOKEN : {<TEXT : (["a"-"z","A"-"Z","0"-"9"])+>}

Token asignarString():
{Token t2;}
{
    <QUOTE>(t2 = <TEXT>|t2 = <NUMBER>)<QUOTE>
    {return t2;}
}
void String():
{}
{
    <QUOTE>(<TEXT>|<NUMBER>)[(Interpolacion()|(<TEXT>|<NUMBER>))+]<QUOTE>
}
void Interpolacion():
{}
{
    //Operaciones()
    <CAT><LBRACE>(<TEXT>|<NUMBER>|Operaciones())<RBRACE>
}
void Array():
{}
{
    <LBRACKET>[(<TEXT>|<NIL>|String()|<NUMBER>|<TRUE>|<FALSE>)[(<COMMA>(<TEXT>|<NIL>|String()|<NUMBER>|<TRUE>|<FALSE>))+]]<RBRACKET>
}
void Start():
{}
{
    Code()
}
void Code():
{}
{
    (
        If()|
        For()|
        Puts()|
        Variables()|
		Operaciones()
    )+
}
void If():
{}
{
  <IF>Comparacion()
    Code()
    [<ELSE><LineBreak>
    Code()]
    <END><LineBreak>
}
void Comparacion():
{}
{
  (<TRUE>|<FALSE>)<LineBreak>|
  (<NUMBER>|<TEXT>|<TRUE>|<FALSE>|String())(<BIG>|<BIGEQ>|<LESS>|<LESSEQ>|<EQUALS>)(<NUMBER>|<TEXT>|<TRUE>|<FALSE>|String())<LineBreak>
}
void Variables():
{Token t1,t2;}
{
    /***
    * variable = 0 | variable = "" | variable = nil | variable = false | variable = variable2
    *
    */
    t1 = <TEXT><ASIGNATION>(
    t2 = <NUMBER>{tokenAsignaciones.Asignar(t1,Integer.parseInt(t2.image));}|
    t2 = asignarString(){tokenAsignaciones.Asignar(t1,t2.image);}|
    t2 = <TEXT>{tokenAsignaciones.AsignarVariable(t1,t2.image);}|
    t2 = <NIL>{tokenAsignaciones.Asignar(t1,"nil");}|
    t2 = <TRUE>{tokenAsignaciones.Asignar(t1,Boolean.parseBoolean(t2.image));}|
    t2 = <FALSE>{tokenAsignaciones.Asignar(t1,Boolean.parseBoolean(t2.image));}|
    /***
    *
    * variable = [] | variable = [var1, nil, 2, "cadena", false, [...]
    */
    Array()|Operaciones())<LineBreak>
}
void Puts():
{Token t1;}
{
    /***
    * puts variable | puts "Hola mundo" | puts "me llamo #{nombre} y tengo #{edad} añazos"
    */
    <PUTS>(String()|t1 = <TEXT>{puts.puts(t1);}|<NUMBER>|Operaciones())<LineBreak>
}
void For():
{}
{
    /***
    * for i in 10|[var,"hola",3,false]|"texto" | for i in array|string variable
    */
    <FOR><TEXT><IN>(<NUMBER>|String()|<TEXT>|Array())<LineBreak>
        Code()
    <END><LineBreak>
}
void Operaciones():
{}
{
<NUMBER>|String()|[<LPAREN>]((<NUMBER>|String())OperadoresArit()(<NUMBER>|String()))+[<RPAREN>]<LineBreak>
}
void OperadoresArit():
{}
{
 (<PLUS>|<MINUS>|<POR>|<DIVIDE>)
}